/**
 * üåê SCRIPT DE DIAGN√ìSTICO PARA EXECUTAR NO NAVEGADOR
 * Cole este c√≥digo no Console do DevTools (F12) quando estiver na p√°gina
 */

// Fun√ß√£o para diagnosticar o sistema de previs√£o no frontend
async function diagnosticarSistemaPrevisao() {
  console.log('üîç DIAGN√ìSTICO DO SISTEMA DE PREVIS√ÉO - FRONTEND');
  console.log('===============================================');

  // 1. Verificar se o weatherService est√° dispon√≠vel
  console.log('\n1Ô∏è‚É£ Verificando weatherService...');
  if (typeof window.weatherService !== 'undefined') {
    console.log('‚úÖ weatherService encontrado globalmente');
  } else if (typeof weatherService !== 'undefined') {
    console.log('‚úÖ weatherService encontrado no escopo');
  } else {
    console.log('‚ùå weatherService N√ÉO encontrado');
    console.log('üí° Verifique se o import do weatherService est√° correto');
    return;
  }

  // 2. Verificar conectividade com backend
  console.log('\n2Ô∏è‚É£ Verificando conectividade com backend...');
  try {
    const healthResponse = await fetch('/health');
    if (healthResponse.ok) {
      console.log('‚úÖ Backend respondendo na rota /health');
    } else {
      console.log('‚ö†Ô∏è Backend retornou erro:', healthResponse.status);
    }
  } catch (error) {
    console.log('‚ùå Erro ao conectar com backend:', error.message);
    console.log('üí° Verifique se o backend est√° rodando na porta 3001');
  }

  // 3. Testar API de clima
  console.log('\n3Ô∏è‚É£ Testando API de clima...');
  try {
    const weatherResponse = await fetch(
      '/api/weather/weather?lat=-23.5505&lon=-46.6333'
    );
    if (weatherResponse.ok) {
      const weatherData = await weatherResponse.json();
      console.log('‚úÖ API de clima funcionando:', weatherData.name);
    } else {
      console.log('‚ùå Erro na API de clima:', weatherResponse.status);
      console.log('üí° Verifique a API Key do OpenWeatherMap no backend');
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar API de clima:', error.message);
  }

  // 4. Testar API de previs√£o
  console.log('\n4Ô∏è‚É£ Testando API de previs√£o...');
  try {
    const forecastResponse = await fetch(
      '/api/weather/forecast?lat=-23.5505&lon=-46.6333'
    );
    if (forecastResponse.ok) {
      const forecastData = await forecastResponse.json();
      console.log(
        '‚úÖ API de previs√£o funcionando:',
        forecastData.list.length,
        'registros'
      );
    } else {
      console.log('‚ùå Erro na API de previs√£o:', forecastResponse.status);
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar API de previs√£o:', error.message);
  }

  // 5. Testar weatherService diretamente
  console.log('\n5Ô∏è‚É£ Testando weatherService diretamente...');
  const testCases = [7, 10, 14];

  for (const days of testCases) {
    try {
      console.log(`\nüìÖ Testando previs√£o para ${days} dias...`);

      // Usar weatherService global ou importado
      const service = window.weatherService || weatherService;
      const forecast = await service.getForecast(-23.5505, -46.6333, days);

      if (forecast && Array.isArray(forecast)) {
        console.log(`‚úÖ ${days} dias: Recebidos ${forecast.length} dias`);

        // Mostrar alguns detalhes
        forecast.slice(0, 3).forEach((day, index) => {
          console.log(
            `   ${index + 1}. ${day.date}: ${day.temperature.min}¬∞C - ${day.temperature.max}¬∞C (${day.description})`
          );
        });

        if (forecast.length > 3) {
          console.log(`   ... e mais ${forecast.length - 3} dias`);
        }

        // Verificar se est√° retornando a quantidade correta
        if (forecast.length === days) {
          console.log(`   ‚úÖ Quantidade correta: ${days} dias`);
        } else {
          console.log(
            `   ‚ùå PROBLEMA: Esperava ${days} dias, recebeu ${forecast.length}`
          );
        }
      } else {
        console.log(`‚ùå ${days} dias: Dados inv√°lidos recebidos`);
      }
    } catch (error) {
      console.log(`‚ùå ${days} dias: Erro ao obter previs√£o:`, error.message);
    }
  }

  // 6. Verificar estado atual da p√°gina
  console.log('\n6Ô∏è‚É£ Verificando estado atual da p√°gina...');

  // Procurar elementos relacionados ao clima
  const weatherSection =
    document.querySelector('[class*="weather"]') ||
    document.querySelector('[class*="Weather"]') ||
    document.querySelector('*[class*="forecast"]') ||
    document.querySelector('*[class*="Forecast"]');

  if (weatherSection) {
    console.log('‚úÖ Se√ß√£o de clima encontrada na p√°gina');

    // Procurar bot√µes de dias
    const dayButtons = document.querySelectorAll('button');
    const weatherButtons = Array.from(dayButtons).filter(
      (btn) =>
        btn.textContent &&
        (btn.textContent.includes('dia') ||
          btn.textContent.includes('7') ||
          btn.textContent.includes('10') ||
          btn.textContent.includes('14'))
    );

    if (weatherButtons.length > 0) {
      console.log(
        `‚úÖ Encontrados ${weatherButtons.length} bot√µes de sele√ß√£o de dias`
      );
      weatherButtons.forEach((btn) => {
        console.log(`   - "${btn.textContent.trim()}" (${btn.className})`);
      });
    } else {
      console.log('‚ùå Bot√µes de sele√ß√£o de dias n√£o encontrados');
    }

    // Procurar cards de previs√£o
    const forecastCards =
      weatherSection.querySelectorAll('[class*="card"]') ||
      weatherSection.querySelectorAll('[class*="Card"]') ||
      weatherSection.querySelectorAll('div');

    console.log(
      `   üìä Elementos filhos na se√ß√£o: ${weatherSection.children.length}`
    );
  } else {
    console.log('‚ùå Se√ß√£o de clima N√ÉO encontrada na p√°gina');
    console.log('üí° Verifique se o componente de clima est√° sendo renderizado');
  }

  // 7. Verificar erros no console
  console.log('\n7Ô∏è‚É£ Verificando poss√≠veis problemas...');
  console.log('üìã CHECKLIST DE VERIFICA√á√ÉO:');
  console.log('   ‚ñ° Backend rodando (porta 3001)');
  console.log('   ‚ñ° API Key configurada no backend');
  console.log('   ‚ñ° Sem erros de CORS no console');
  console.log('   ‚ñ° weatherService importado corretamente');
  console.log('   ‚ñ° Componente de clima renderizando');
  console.log('   ‚ñ° Bot√µes de dias com onClick funcionando');
  console.log('   ‚ñ° useEffect reagindo a mudan√ßas em forecastDays');
  console.log('   ‚ñ° loadWeatherData sendo chamada');

  console.log('\nüí° PR√ìXIMOS PASSOS:');
  console.log('1. Verifique os logs acima para identificar falhas');
  console.log('2. Se APIs est√£o falhando, inicie o backend: npm start');
  console.log('3. Se dados n√£o aparecem, verifique o console para erros React');
  console.log('4. Teste os bot√µes 7/10/14 dias manualmente');
  console.log('5. Verifique a aba Network para requisi√ß√µes bloqueadas');

  return true;
}

// Executar diagn√≥stico automaticamente
diagnosticarSistemaPrevisao();
