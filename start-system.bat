@echo off
echo üöÄ Iniciando sistema EPU-Gest√£o...

REM Verificar se o Docker est√° rodando
echo üîç Verificando Docker...
docker info >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop primeiro.
    echo üí° Aguarde o Docker inicializar completamente antes de continuar.
    pause
    exit /b 1
)

echo ‚úÖ Docker est√° rodando

REM Parar containers existentes se estiverem rodando
echo üõë Parando containers existentes...
docker-compose down --remove-orphans

REM Construir e iniciar containers
echo üèóÔ∏è Construindo e iniciando containers...
docker-compose up -d --build

REM Aguardar containers iniciarem
echo ‚è≥ Aguardando containers iniciarem...
timeout /t 10 /nobreak >nul

REM Verificar status dos containers
echo üìã Status dos containers:
docker-compose ps

REM Verificar sa√∫de dos containers
echo üè• Verificando sa√∫de dos containers...
timeout /t 5 /nobreak >nul

REM Tentar algumas vezes verificar se o backend est√° respondendo
echo üîç Testando conectividade do backend...
for /l %%i in (1,1,5) do (
    curl -s http://localhost:5000/api/health >nul 2>&1
    if %errorlevel% equ 0 (
        echo ‚úÖ Backend est√° respondendo
        goto :frontend_check
    ) else (
        echo ‚è≥ Tentativa %%i/5 - Backend ainda n√£o est√° pronto...
        timeout /t 3 /nobreak >nul
    )
)

:frontend_check
REM Verificar se o frontend est√° acess√≠vel
echo üîç Testando conectividade do frontend...
curl -s http://localhost:3000 >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Frontend est√° acess√≠vel
) else (
    echo ‚ö†Ô∏è Frontend pode n√£o estar pronto ainda
)

echo üéâ Sistema iniciado! Acesse:
echo    Frontend: http://localhost:3000
echo    Backend: http://localhost:5000
echo    MongoDB: localhost:27017
pause
