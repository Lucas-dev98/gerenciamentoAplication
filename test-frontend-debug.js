// Teste Frontend Debug - Execute no console do navegador em http://localhost:3000
// Este arquivo testa especificamente o weatherService no frontend

// Fun√ß√£o para testar o weatherService diretamente
async function testWeatherServiceFrontend() {
  console.log('üîç Testando WeatherService Frontend...');

  try {
    // Verificar se o weatherService est√° dispon√≠vel globalmente
    if (typeof window !== 'undefined' && window.weatherService) {
      console.log('‚úÖ WeatherService encontrado no window object');
    } else {
      console.warn('‚ö†Ô∏è WeatherService n√£o encontrado no window object');
    }

    // Testar atrav√©s do import direto se poss√≠vel
    console.log('üß™ Testando API de clima...');

    // Teste 1: Rota de teste
    console.log('\n--- Teste 1: Rota de teste ---');
    const testResponse = await fetch('/api/weather/test');
    if (testResponse.ok) {
      const testData = await testResponse.json();
      console.log('‚úÖ Rota de teste funcionando:', testData);
    } else {
      console.error('‚ùå Rota de teste falhou:', testResponse.status);
    }

    // Teste 2: Clima por coordenadas (S√£o Paulo)
    console.log('\n--- Teste 2: Clima por coordenadas ---');
    const weatherResponse = await fetch(
      '/api/weather/weather?lat=-23.5505&lon=-46.6333'
    );
    if (weatherResponse.ok) {
      const weatherData = await weatherResponse.json();
      console.log('‚úÖ Clima por coordenadas funcionando:');
      console.log(`   üìç Local: ${weatherData.name}`);
      console.log(`   üå°Ô∏è Temperatura: ${weatherData.main.temp}¬∞C`);
      console.log(`   üå§Ô∏è Tempo: ${weatherData.weather[0].description}`);
    } else {
      console.error('‚ùå Clima por coordenadas falhou:', weatherResponse.status);
    }

    // Teste 3: Verificar se o navigator.geolocation est√° dispon√≠vel
    console.log('\n--- Teste 3: Geolocaliza√ß√£o do navegador ---');
    if (navigator.geolocation) {
      console.log('‚úÖ Geolocaliza√ß√£o dispon√≠vel no navegador');

      // Testar permiss√µes
      if (navigator.permissions) {
        const permission = await navigator.permissions.query({
          name: 'geolocation',
        });
        console.log(`üìã Status da permiss√£o: ${permission.state}`);

        if (permission.state === 'denied') {
          console.warn(
            '‚ö†Ô∏è Permiss√£o de geolocaliza√ß√£o negada. Habilite nas configura√ß√µes do navegador.'
          );
        }
      }
    } else {
      console.error('‚ùå Geolocaliza√ß√£o n√£o dispon√≠vel no navegador');
    }

    // Teste 4: Tentar obter localiza√ß√£o real (se poss√≠vel)
    console.log('\n--- Teste 4: Obtendo localiza√ß√£o real ---');
    try {
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          timeout: 10000,
          enableHighAccuracy: false,
          maximumAge: 300000, // 5 minutos
        });
      });

      const coords = position.coords;
      console.log(`‚úÖ Localiza√ß√£o obtida:`);
      console.log(`   üìç Latitude: ${coords.latitude}`);
      console.log(`   üìç Longitude: ${coords.longitude}`);
      console.log(`   üìç Precis√£o: ${coords.accuracy}m`);

      // Testar clima com localiza√ß√£o real
      console.log('\n--- Teste 5: Clima da localiza√ß√£o real ---');
      const realWeatherResponse = await fetch(
        `/api/weather/weather?lat=${coords.latitude}&lon=${coords.longitude}`
      );
      if (realWeatherResponse.ok) {
        const realWeatherData = await realWeatherResponse.json();
        console.log('‚úÖ Clima da sua localiza√ß√£o:');
        console.log(`   üìç Local: ${realWeatherData.name}`);
        console.log(`   üå°Ô∏è Temperatura: ${realWeatherData.main.temp}¬∞C`);
        console.log(`   üå§Ô∏è Tempo: ${realWeatherData.weather[0].description}`);
        console.log(`   üíß Umidade: ${realWeatherData.main.humidity}%`);
      }
    } catch (geoError) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel obter localiza√ß√£o:', geoError.message);

      if (geoError.code === 1) {
        console.warn('   Motivo: Permiss√£o negada pelo usu√°rio');
      } else if (geoError.code === 2) {
        console.warn('   Motivo: Posi√ß√£o indispon√≠vel');
      } else if (geoError.code === 3) {
        console.warn('   Motivo: Timeout');
      }
    }

    console.log('\n‚úÖ Testes do frontend conclu√≠dos!');
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Fun√ß√£o para simular clique no bot√£o de localiza√ß√£o
function simulateLocationButton() {
  console.log('üéØ Simulando clique no bot√£o de localiza√ß√£o...');

  // Procurar pelo bot√£o de localiza√ß√£o na p√°gina
  const locationButtons = document.querySelectorAll('button');
  let foundButton = null;

  for (const button of locationButtons) {
    const buttonText = button.textContent || '';
    if (
      buttonText.includes('üìç') ||
      buttonText.includes('localiza√ß√£o') ||
      buttonText.includes('Obter')
    ) {
      foundButton = button;
      break;
    }
  }

  if (foundButton) {
    console.log('‚úÖ Bot√£o de localiza√ß√£o encontrado, clicando...');
    foundButton.click();
  } else {
    console.warn('‚ö†Ô∏è Bot√£o de localiza√ß√£o n√£o encontrado');
    console.log('Bot√µes dispon√≠veis na p√°gina:');
    document.querySelectorAll('button').forEach((btn, index) => {
      console.log(`  ${index}: "${btn.textContent}"`);
    });
  }
}

// Exportar fun√ß√µes para uso no console
window.testWeatherServiceFrontend = testWeatherServiceFrontend;
window.simulateLocationButton = simulateLocationButton;

console.log('üîß Fun√ß√µes de debug frontend carregadas!');
console.log('üìù Use no console:');
console.log('   testWeatherServiceFrontend() - Testa todo o sistema');
console.log('   simulateLocationButton() - Simula clique no bot√£o');
